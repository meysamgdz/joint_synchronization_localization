import numpy as npimport matplotlib.pyplot as pltimport matplotlib as mplfrom jointSyncLoc import jointSyncLocnum_iter, T, num_bin, mu_t, num_particles = 1, 0.25, 100, 0, 200x_range, off_range = (0, 8), (0, 8)x = np.linspace(x_range[0], x_range[1], num_bin)x_axis = np.arange(2, 6, 2) + 2x_loc_tot = np.zeros((2, len(x_axis)))x_off_tot = np.zeros((2, len(x_axis)))cdf_brf = np.empty((0, num_bin))cdf_PF = np.empty((0, num_bin))v_const = 10num_AP, nlos_id, AP_step = 1, 0, 50ue = jointSyncLoc(v_const, T,  AP_step)seed = np.random.randint(0, 1000)for std in x_axis:    print('Value of the parameter:', std)    np.random.seed(seed)    x_loc, x_off = 0., 0.    x_loc, x_off = ue.brf_loc_xAP(mu_t, std, num_iter, num_AP=num_AP, nlos_id=nlos_id)    h = np.histogram(x_loc, bins=num_bin, range=x_range, density=True)    o = np.histogram(x_off, bins=num_bin, range=off_range, density=True)    print('BRF-->', np.mean(x_loc ** 2) ** .5, np.mean(x_off ** 2) ** .5)    h_cdf = np.add.accumulate(h[0]) / h[0].sum()    o_cdf = np.add.accumulate(o[0]) / o[0].sum()    cdf_brf = np.append(cdf_brf, np.expand_dims(h_cdf, axis=0), axis=0)    cdf_brf = np.append(cdf_brf, np.expand_dims(o_cdf, axis=0), axis=0)    np.random.seed(seed)    x_loc, x_off = 0., 0.    x_loc, x_off, _ = ue.PF_loc_xAP(mu_t, std, num_iter, num_particles, num_AP=num_AP, nlos_id=nlos_id)    h = np.histogram(x_loc, bins=num_bin, range=x_range, density=True)    o = np.histogram(x_off, bins=num_bin, range=off_range, density=True)    print('PF-->', np.mean(x_loc**2)**.5, np.mean(x_off**2)**.5)    h_cdf = np.add.accumulate(h[0]) / h[0].sum()    o_cdf = np.add.accumulate(o[0]) / o[0].sum()    cdf_PF = np.append(cdf_PF, np.expand_dims(h_cdf, axis=0), axis=0)    cdf_PF = np.append(cdf_PF, np.expand_dims(o_cdf, axis=0), axis=0)# Plotting the resultsplt.rcParams['font.family'] = 'Times New Roman'plt.rcParams['text.usetex'] = Trueplt.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'plt.rcParams['mathtext.fontset'] = 'cm'plt.rcParams.update({'font.size': 10})mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=["blue", "red", "green"])fig, ax1 = plt.subplots(figsize=(6, 3.75))leg = []ax1.plot(x, cdf_brf.T[:, 0::2], linestyle='-', linewidth=2)leg += [f"L-BRF - {i}" for i in x_axis]ax1.plot(x, cdf_PF.T[:, 0::2], linestyle='--', linewidth=2)leg += [f"DePF - {i}" for i in x_axis]plt.gca().set_prop_cycle(None)ax1.set(title='Position Estimation', ylabel='CDF', xlabel='Position error (m)')plt.legend(leg)fig, ax2 = plt.subplots(figsize=(6, 3.75))ax2.plot(x, cdf_brf.T[:, 1::2], linestyle='-', linewidth=2)ax2.plot(x, cdf_PF.T[:, 1::2], linestyle='--', linewidth=2)plt.gca().set_prop_cycle(None)ax2.set(title='Offset Estimation', ylabel=r'CDF', xlabel=r'Offset error (ns)')plt.legend(leg)plt.show()